c3d4bd4e687e1ebe6d1869525839d2ed
var STRIDE=24,Shader=__class__,Shader=Shader(function(){return this.init&&this.init.apply(this,arguments)},function(){this.init=function(a){this._gl=a.gl;this._vertexSrc=a.vertexSrc||"precision mediump float;\nattribute vec2 aTextureCoord;\nattribute vec2 aPosition;\nattribute vec4 aColor;\nattribute float aAlpha;\nuniform vec2 uResolution;\nvarying vec2 vTextureCoord;\nvarying float vAlpha;\nvarying vec4 vColor;\nvoid main() {\n vTextureCoord = aTextureCoord;\n vColor = aColor;\n vAlpha = aAlpha;\n vec2 clipSpace = (aPosition / uResolution) * 2.0 - 1.0;\n gl_Position = vec4(clipSpace * vec2(1.0, -1.0), 0.0, 1.0);\n}";
this._fragmentSrc=a.fragmentSrc||"precision mediump float;\nvarying vec2 vTextureCoord;\nvarying float vAlpha;\nuniform sampler2D uSampler;\nvoid main(void) {\n gl_FragColor = texture2D(uSampler, vTextureCoord) * vAlpha;\n}";a=void 0!==a.useTexture?a.useTexture:!0;this.attributes={aTextureCoord:0,aPosition:0,aAlpha:0,aColor:0};this.uniforms={uSampler:a?0:-1,uResolution:0};this.initGL()};this.initGL=function(){this.createProgram();this.updateLocations()};this.updateLocations=function(){var a=this._gl,
c;for(c in this.attributes)-1!==this.attributes[c]&&(this.attributes[c]=a.getAttribLocation(this.program,c));for(var b in this.uniforms)-1!==this.uniforms[b]&&(this.uniforms[b]=a.getUniformLocation(this.program,b))};this.enableVertexAttribArrays=function(){var a=this._gl,c;for(c in this.attributes)if(-1!==this.attributes[c]){var b=this.attributes[c];a.enableVertexAttribArray(b);switch(c){case "aPosition":a.vertexAttribPointer(b,2,a.FLOAT,!1,STRIDE,0);break;case "aTextureCoord":a.vertexAttribPointer(b,
2,a.FLOAT,!1,STRIDE,8);break;case "aAlpha":a.vertexAttribPointer(b,1,a.FLOAT,!1,STRIDE,16);break;case "aColor":a.vertexAttribPointer(b,4,a.UNSIGNED_BYTE,!0,STRIDE,20)}}};this.disableVertexAttribArrays=function(){for(var a in this.attributes)-1!==this.attributes[a]&&gl.disableVertexAttribArray(this.attributes[a])};this.createProgram=function(){gl=this._gl;var a=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(a,this._vertexSrc);gl.compileShader(a);var c=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(c,
this._fragmentSrc);gl.compileShader(c);var b=gl.createProgram();gl.attachShader(b,a);gl.attachShader(b,c);gl.linkProgram(b);gl.getProgramParameter(b,gl.LINK_STATUS)||console.log("Could not initialize shaders");this.program=b}}),LinearAddShader=__class__,LinearAddShader=LinearAddShader(function(){return this.init&&this.init.apply(this,arguments)},Shader,function(){this.init=function(a){a.fragmentSrc="precision mediump float;\nvarying vec2 vTextureCoord;\nvarying float vAlpha;\nvarying vec4 vColor;\nuniform sampler2D uSampler;\nvoid main(void) {\n vec4 vSample = texture2D(uSampler, vTextureCoord);\n gl_FragColor = vec4((vSample.rgb + vColor.rgb * vColor.a) * vSample.a, vSample.a) * vAlpha;\n}";
Shader.prototype.init.call(this,a)}}),TintShader=__class__,TintShader=TintShader(function(){return this.init&&this.init.apply(this,arguments)},Shader,function(){this.init=function(a){a.fragmentSrc="precision mediump float;\nvarying vec2 vTextureCoord;\nvarying float vAlpha;\nvarying vec4 vColor;\nuniform sampler2D uSampler;\nvoid main(void) {\n vec4 vSample = texture2D(uSampler, vTextureCoord);\n gl_FragColor = vec4((vSample.rgb * (1.0 - vColor.a) + (vColor.rgb * vColor.a)) * vSample.a * vAlpha, vSample.a * vAlpha);\n}";
Shader.prototype.init.call(this,a)}}),MultiplyShader=__class__,MultiplyShader=MultiplyShader(function(){return this.init&&this.init.apply(this,arguments)},Shader,function(){this.init=function(a){a.fragmentSrc="precision mediump float;\nvarying vec2 vTextureCoord;\nvarying float vAlpha;\nvarying vec4 vColor;\nuniform sampler2D uSampler;\nvoid main(void) {\n vec4 vSample = texture2D(uSampler, vTextureCoord);\n gl_FragColor = vec4(vSample.rgb * (vColor.rgb * vColor.a), vSample.a) * vAlpha;\n}";Shader.prototype.init.call(this,
a)}}),RectShader=__class__,RectShader=RectShader(function(){return this.init&&this.init.apply(this,arguments)},Shader,function(){this.init=function(a){a.fragmentSrc="precision mediump float;\nvarying float vAlpha;\nvarying vec4 vColor;\nvoid main(void) {\n gl_FragColor = vColor * vColor.a * vAlpha;\n}";a.useTexture=!1;Shader.prototype.init.call(this,a)}});exports={DefaultShader:Shader,LinearAddShader:LinearAddShader,TintShader:TintShader,MultiplyShader:MultiplyShader,RectShader:RectShader};
